
epsilonv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000b8c  00000c20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080014a  0080014a  00000c6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000141c  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000989  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c2  00000000  00000000  00002bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00003470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  000036a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000919  00000000  00000000  00003bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000044db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 35       	cpi	r26, 0x58	; 88
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1b 02 	call	0x436	; 0x436 <main>
  9e:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
.equ DDRD, 0x2A
.global setup

setup:
    ; Set Port D as output
    ldi r16, 0xFF   ; Load 0xFF into register r16 (all bits set to 1)
  a6:	0f ef       	ldi	r16, 0xFF	; 255
    out DDRD, r16   ; Set all bits of DDRD register to 1 (output)
  a8:	0a bd       	out	0x2a, r16	; 42

    ; Set Port B as input
    ldi r16, 0x00   ; Load 0x00 into register r16 (all bits set to 0)
  aa:	00 e0       	ldi	r16, 0x00	; 0
    out DDRB, r16   ; Set all bits of DDRB register to 0 (input)
  ac:	04 bd       	out	0x24, r16	; 36

000000ae <loop>:

loop:
  ae:	ff cf       	rjmp	.-2      	; 0xae <loop>

000000b0 <i2c_write>:
void i2c_stop(void);
void i2c_init(void);

// I2C communication functions
void i2c_write(unsigned char data) {
	TWDR = data;
  b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)));
  ba:	ec eb       	ldi	r30, 0xBC	; 188
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <i2c_write+0xe>
}
  c4:	08 95       	ret

000000c6 <i2c_start>:

void i2c_start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  c6:	84 ea       	ldi	r24, 0xA4	; 164
  c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while ((TWCR & (1 << TWINT)) == 0);
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <i2c_start+0xa>
}
  d6:	08 95       	ret

000000d8 <i2c_stop>:

void i2c_stop(void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
  d8:	84 e9       	ldi	r24, 0x94	; 148
  da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <i2c_stop+0x8>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <i2c_init>:
	_delay_us(10); // Ensure STOP condition is executed properly
}

void i2c_init(void) {
	TWSR = 0x00;              // Set prescaler bits to zero
  e8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	TWBR = 0x48;              // Set bit rate register for 100 kHz at 16 MHz clock
  ec:	88 e4       	ldi	r24, 0x48	; 72
  ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	TWCR = (1 << TWEN);       // Enable the TWI module
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  f8:	08 95       	ret

000000fa <write>:
	write4Bit(0x0F);
	setBacklight(1);
	return 1;
}

void write(uint8_t data) {
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	i2c_start(); // Transmit START condition
  fe:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_start>
	i2c_write(_addr << 1); // Transmit SLA + W(0)
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 106:	88 0f       	add	r24, r24
 108:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_write>
	i2c_write(data); // Transmit data
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_write>
	i2c_stop(); // Transmit STOP condition
 112:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2c_stop>
	// Handle I2C errors if needed
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <latch>:

void latch() {
	p_write = p_write & 0xF9;
 11a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <p_write>
 11e:	89 7f       	andi	r24, 0xF9	; 249
 120:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <p_write>
	write(p_write);
 124:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	89 ef       	ldi	r24, 0xF9	; 249
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <latch+0x12>
 130:	00 c0       	rjmp	.+0      	; 0x132 <latch+0x18>
 132:	00 00       	nop
	_delay_ms(1);
	p_write = p_write | 0x04;
 134:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <p_write>
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <p_write>
	write(p_write);
 13e:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
 142:	89 ef       	ldi	r24, 0xF9	; 249
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <latch+0x2c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <latch+0x32>
 14c:	00 00       	nop
	_delay_ms(1);
	p_write = p_write & 0xF9;
 14e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <p_write>
 152:	89 7f       	andi	r24, 0xF9	; 249
 154:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <p_write>
	write(p_write);
 158:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	91 e2       	ldi	r25, 0x21	; 33
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <latch+0x44>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <write4Bit>:
	_delay_us(100);
}

void write4Bit(uint8_t data) {
	p_write &= 0x0F;
	p_write |= data << 4;
 166:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <p_write>
 16a:	2f 70       	andi	r18, 0x0F	; 15
 16c:	30 e1       	ldi	r19, 0x10	; 16
 16e:	83 9f       	mul	r24, r19
 170:	c0 01       	movw	r24, r0
 172:	11 24       	eor	r1, r1
 174:	82 2b       	or	r24, r18
 176:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <p_write>
	latch();
 17a:	0e 94 8d 00 	call	0x11a	; 0x11a <latch>
 17e:	08 95       	ret

00000180 <writeByte>:
}

void writeByte(uint8_t data) {
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
	write4Bit(data >> 4);
 184:	82 95       	swap	r24
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(data);
 18c:	8c 2f       	mov	r24, r28
 18e:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
}
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <writeCommand>:

void writeCommand(uint8_t data) {
 196:	cf 93       	push	r28
 198:	c8 2f       	mov	r28, r24
	p_write = p_write & 0xF8;  // RS LOW
 19a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <p_write>
 19e:	88 7f       	andi	r24, 0xF8	; 248
 1a0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <p_write>
	write(p_write);
 1a4:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
	writeByte(data);
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 c0 00 	call	0x180	; 0x180 <writeByte>
}
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <writeData>:

void writeData(uint8_t data) {
 1b2:	cf 93       	push	r28
 1b4:	c8 2f       	mov	r28, r24
	p_write = p_write | 0x01;  // RS HIGH
 1b6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <p_write>
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <p_write>
	write(p_write);
 1c0:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
	writeByte(data);
 1c4:	8c 2f       	mov	r24, r28
 1c6:	0e 94 c0 00 	call	0x180	; 0x180 <writeByte>
}
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <setPosition>:

void setPosition(uint8_t x, uint8_t y) {
	if (y == 0) {
 1ce:	61 11       	cpse	r22, r1
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <setPosition+0xc>
		writeCommand(0x80 | x);
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	0e 94 cb 00 	call	0x196	; 0x196 <writeCommand>
 1d8:	08 95       	ret
		} else if (y == 1) {
 1da:	61 30       	cpi	r22, 0x01	; 1
 1dc:	19 f4       	brne	.+6      	; 0x1e4 <setPosition+0x16>
		writeCommand(0x80 | 0x40 | x);
 1de:	80 6c       	ori	r24, 0xC0	; 192
 1e0:	0e 94 cb 00 	call	0x196	; 0x196 <writeCommand>
 1e4:	08 95       	ret

000001e6 <print>:
	}
}

void print(const char *str) {
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
	while (*str) {
 1ec:	88 81       	ld	r24, Y
 1ee:	88 23       	and	r24, r24
 1f0:	31 f0       	breq	.+12     	; 0x1fe <print+0x18>
 1f2:	21 96       	adiw	r28, 0x01	; 1
		writeData(*str);
 1f4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <writeData>
		writeCommand(0x80 | 0x40 | x);
	}
}

void print(const char *str) {
	while (*str) {
 1f8:	89 91       	ld	r24, Y+
 1fa:	81 11       	cpse	r24, r1
 1fc:	fb cf       	rjmp	.-10     	; 0x1f4 <print+0xe>
		writeData(*str);
		str += 1;
	}
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <lcdclear>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	87 ea       	ldi	r24, 0xA7	; 167
 206:	91 e6       	ldi	r25, 0x61	; 97
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcdclear+0x4>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcdclear+0xa>
 20e:	00 00       	nop

void lcdclear() {
	_delay_ms(100);
	writeCommand(0x01);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 cb 00 	call	0x196	; 0x196 <writeCommand>
 216:	87 ea       	ldi	r24, 0xA7	; 167
 218:	91 e6       	ldi	r25, 0x61	; 97
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcdclear+0x16>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcdclear+0x1c>
 220:	00 00       	nop
 222:	08 95       	ret

00000224 <setBacklight>:
	_delay_ms(100);
}

void setBacklight(uint8_t data) {
	p_write = 0;
 224:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <p_write>
	if (data) {
 228:	88 23       	and	r24, r24
 22a:	31 f0       	breq	.+12     	; 0x238 <setBacklight+0x14>
		p_write |= 0x08;
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <p_write>
		write(p_write);
 232:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
 236:	03 c0       	rjmp	.+6      	; 0x23e <setBacklight+0x1a>
		} else {
		p_write &= 0xF7;
		write(p_write);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
 23e:	83 ed       	ldi	r24, 0xD3	; 211
 240:	90 e3       	ldi	r25, 0x30	; 48
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <setBacklight+0x1e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <setBacklight+0x24>
 248:	00 00       	nop
 24a:	08 95       	ret

0000024c <lcdbegin>:
	TWBR = 0x48;              // Set bit rate register for 100 kHz at 16 MHz clock
	TWCR = (1 << TWEN);       // Enable the TWI module
}

char lcdbegin() {
	i2c_init(); // Initialize I2C
 24c:	0e 94 74 00 	call	0xe8	; 0xe8 <i2c_init>

	write(0x00);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
	write4Bit(0x03);
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	84 e6       	ldi	r24, 0x64	; 100
 262:	94 e0       	ldi	r25, 0x04	; 4
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcdbegin+0x18>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcdbegin+0x1e>
 26a:	00 00       	nop
	_delay_us(4500);
	write4Bit(0x03);
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
 274:	84 e6       	ldi	r24, 0x64	; 100
 276:	94 e0       	ldi	r25, 0x04	; 4
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcdbegin+0x2c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcdbegin+0x32>
 27e:	00 00       	nop
	_delay_us(4500);
	write4Bit(0x03);
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
 288:	92 e3       	ldi	r25, 0x32	; 50
 28a:	9a 95       	dec	r25
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcdbegin+0x3e>
	_delay_us(150);
	write4Bit(0x02);
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x02);
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x0C);
 29e:	8c e0       	ldi	r24, 0x0C	; 12
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x00);
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x08);
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x00);
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x01);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x00);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x06);
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x00);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	write4Bit(0x0F);
 2de:	8f e0       	ldi	r24, 0x0F	; 15
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 b3 00 	call	0x166	; 0x166 <write4Bit>
	setBacklight(1);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 12 01 	call	0x224	; 0x224 <setBacklight>
	return 1;
}
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	08 95       	ret

000002f2 <init_ADC>:
}

void init_ADC(void)
{
	// Set ADC reference voltage to AVCC with external capacitor at AREF pin
	ADMUX = (1 << REFS0); // AVCC with external capacitor at AREF pin
 2f2:	80 e4       	ldi	r24, 0x40	; 64
 2f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>

	// Set ADC prescaler to 128 for a 16MHz clock, results in 125kHz ADC clock
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 2f8:	ea e7       	ldi	r30, 0x7A	; 122
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	87 60       	ori	r24, 0x07	; 7
 300:	80 83       	st	Z, r24

	// Enable ADC and ADC interrupt
	ADCSRA |= (1 << ADEN) | (1 << ADIE);
 302:	80 81       	ld	r24, Z
 304:	88 68       	ori	r24, 0x88	; 136
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <init_timer>:
}

void init_timer(void)
{
	// Set Timer/Counter1 to CTC (Clear Timer on Compare Match) mode
	TCCR1B |= (1 << WGM12);
 30a:	e1 e8       	ldi	r30, 0x81	; 129
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	88 60       	ori	r24, 0x08	; 8
 312:	80 83       	st	Z, r24

	// Set prescaler to 64, giving a timer frequency of 250kHz for a 16MHz clock
	TCCR1B |= (1 << CS11) | (1 << CS10);
 314:	80 81       	ld	r24, Z
 316:	83 60       	ori	r24, 0x03	; 3
 318:	80 83       	st	Z, r24

	// Set the compare match value for a 1ms interrupt
	OCR1A = 250;
 31a:	8a ef       	ldi	r24, 0xFA	; 250
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 322:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	// Enable Timer/Counter1 Output Compare A Match interrupt
	TIMSK1 |= (1 << OCIE1A);
 326:	ef e6       	ldi	r30, 0x6F	; 111
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	82 60       	ori	r24, 0x02	; 2
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret

00000332 <__vector_11>:
}

// Timer/Counter1 Output Compare A Match interrupt service routine
ISR(TIMER1_COMPA_vect)
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	8f 93       	push	r24
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 342:	ea e7       	ldi	r30, 0x7A	; 122
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	80 83       	st	Z, r24
}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <map_adc_to_10_steps>:
}

int map_adc_to_10_steps(uint16_t adc_value)
{
	// Define ranges for each step
	if (adc_value <= 102)
 35c:	87 36       	cpi	r24, 0x67	; 103
 35e:	91 05       	cpc	r25, r1
 360:	08 f1       	brcs	.+66     	; 0x3a4 <map_adc_to_10_steps+0x48>
	{
		return 0;
	}
	else if (adc_value <= 205)
 362:	8e 3c       	cpi	r24, 0xCE	; 206
 364:	91 05       	cpc	r25, r1
 366:	08 f1       	brcs	.+66     	; 0x3aa <map_adc_to_10_steps+0x4e>
	{
		return 1;
	}
	else if (adc_value <= 306)
 368:	83 33       	cpi	r24, 0x33	; 51
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	92 07       	cpc	r25, r18
 36e:	00 f1       	brcs	.+64     	; 0x3b0 <map_adc_to_10_steps+0x54>
	{
		return 2;
	}
	else if (adc_value <= 408)
 370:	89 39       	cpi	r24, 0x99	; 153
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	92 07       	cpc	r25, r18
 376:	f8 f0       	brcs	.+62     	; 0x3b6 <map_adc_to_10_steps+0x5a>
	{
		return 3;
	}
	else if (adc_value <= 510)
 378:	8f 3f       	cpi	r24, 0xFF	; 255
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	92 07       	cpc	r25, r18
 37e:	f0 f0       	brcs	.+60     	; 0x3bc <map_adc_to_10_steps+0x60>
	{
		return 4;
	}
	else if (adc_value <= 612)
 380:	85 36       	cpi	r24, 0x65	; 101
 382:	22 e0       	ldi	r18, 0x02	; 2
 384:	92 07       	cpc	r25, r18
 386:	e8 f0       	brcs	.+58     	; 0x3c2 <map_adc_to_10_steps+0x66>
	{
		return 5;
	}
	else if (adc_value <= 714)
 388:	8b 3c       	cpi	r24, 0xCB	; 203
 38a:	22 e0       	ldi	r18, 0x02	; 2
 38c:	92 07       	cpc	r25, r18
 38e:	e0 f0       	brcs	.+56     	; 0x3c8 <map_adc_to_10_steps+0x6c>
	{
		return 6;
	}
	else if (adc_value <= 816)
 390:	81 33       	cpi	r24, 0x31	; 49
 392:	23 e0       	ldi	r18, 0x03	; 3
 394:	92 07       	cpc	r25, r18
 396:	d8 f0       	brcs	.+54     	; 0x3ce <map_adc_to_10_steps+0x72>
	{
		return 7;
	}
	else if (adc_value <= 918)
 398:	87 39       	cpi	r24, 0x97	; 151
 39a:	93 40       	sbci	r25, 0x03	; 3
 39c:	d8 f0       	brcs	.+54     	; 0x3d4 <map_adc_to_10_steps+0x78>
	{
		return 8;
	}
	else
	{
		return 9;
 39e:	89 e0       	ldi	r24, 0x09	; 9
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	08 95       	ret
int map_adc_to_10_steps(uint16_t adc_value)
{
	// Define ranges for each step
	if (adc_value <= 102)
	{
		return 0;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 95       	ret
	}
	else if (adc_value <= 205)
	{
		return 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	08 95       	ret
	}
	else if (adc_value <= 306)
	{
		return 2;
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	08 95       	ret
	}
	else if (adc_value <= 408)
	{
		return 3;
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	08 95       	ret
	}
	else if (adc_value <= 510)
	{
		return 4;
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	08 95       	ret
	}
	else if (adc_value <= 612)
	{
		return 5;
 3c2:	85 e0       	ldi	r24, 0x05	; 5
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	08 95       	ret
	}
	else if (adc_value <= 714)
	{
		return 6;
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	08 95       	ret
	}
	else if (adc_value <= 816)
	{
		return 7;
 3ce:	87 e0       	ldi	r24, 0x07	; 7
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	08 95       	ret
	}
	else if (adc_value <= 918)
	{
		return 8;
 3d4:	88 e0       	ldi	r24, 0x08	; 8
 3d6:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 9;
	}
}
 3d8:	08 95       	ret

000003da <__vector_21>:
	ADCSRA |= (1 << ADSC);
}

// ADC conversion complete interrupt service routine
ISR(ADC_vect)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
	// Read ADC value from ADC data registers ADCL and ADCH
	uint16_t adc_value = ADCL | (ADCH << 8);
 3fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 400:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>

	// Map ADC value to 10 steps (0 to 9) using switch-case
	mapped_value = map_adc_to_10_steps(adc_value);
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	92 2b       	or	r25, r18
 408:	0e 94 ae 01 	call	0x35c	; 0x35c <map_adc_to_10_steps>
 40c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <mapped_value>
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <turnOffLED>:
	}
}

void turnOffLED(void)
{
	PORTD &= ~(1 << ledPin); // Turn off LED
 432:	5a 98       	cbi	0x0b, 2	; 11
 434:	08 95       	ret

00000436 <main>:

int main(void)
{
	//DDRB = 0x00; // Set port B as input
	//DDRD = 0xFF; // Set port D as output
	setup();
 436:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	init_ADC();
 43a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <init_ADC>
	init_timer();
 43e:	0e 94 85 01 	call	0x30a	; 0x30a <init_timer>
	sei();
 442:	78 94       	sei

	// Welcome message [test lcd]
	lcdbegin();
 444:	0e 94 26 01 	call	0x24c	; 0x24c <lcdbegin>
	lcdclear();
 448:	0e 94 02 01 	call	0x204	; 0x204 <lcdclear>
	setPosition(0, 0);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setPosition>
	print("Zeig");
 454:	87 e0       	ldi	r24, 0x07	; 7
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45c:	2f e7       	ldi	r18, 0x7F	; 127
 45e:	84 e8       	ldi	r24, 0x84	; 132
 460:	9e e1       	ldi	r25, 0x1E	; 30
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <main+0x2c>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <main+0x36>
 46c:	00 00       	nop
	_delay_ms(10000); // Change from 10000 to 1000 to reduce delay
	setPosition(0, 1);
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setPosition>
	print("Heil");
 476:	8c e0       	ldi	r24, 0x0C	; 12
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <print>
 47e:	ef e7       	ldi	r30, 0x7F	; 127
 480:	f4 e8       	ldi	r31, 0x84	; 132
 482:	2e e1       	ldi	r18, 0x1E	; 30
 484:	e1 50       	subi	r30, 0x01	; 1
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	20 40       	sbci	r18, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <main+0x4e>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <main+0x58>
 48e:	00 00       	nop
	_delay_ms(10000); // Change from 10000 to 1000 to reduce delay
	lcdclear();
 490:	0e 94 02 01 	call	0x204	; 0x204 <lcdclear>
			if (index >= 3)
			{
				bool match = true;
				for (int i = 0; i < 3; i++)
				{
					if (inputPassword[i] != password[i])
 494:	0f 2e       	mov	r0, r31
 496:	f1 e5       	ldi	r31, 0x51	; 81
 498:	ef 2e       	mov	r14, r31
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	ff 2e       	mov	r15, r31
 49e:	f0 2d       	mov	r31, r0
 4a0:	0f 2e       	mov	r0, r31
 4a2:	f1 e0       	ldi	r31, 0x01	; 1
 4a4:	cf 2e       	mov	r12, r31
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	df 2e       	mov	r13, r31
 4aa:	f0 2d       	mov	r31, r0
					lcdclear();
					setPosition(0, 0);
					print("Password incorrect!");
				}
				index = 0;
				memset(inputPassword, 0, sizeof(inputPassword));
 4ac:	0f 2e       	mov	r0, r31
 4ae:	f6 e0       	ldi	r31, 0x06	; 6
 4b0:	bf 2e       	mov	r11, r31
 4b2:	f0 2d       	mov	r31, r0
			}
			_delay_ms(5000);
		}
		setPosition(0, 1);
		print("Current Value :");
		sprintf(currentvalueString, "%d", mapped_value); // Correct sprintf usage
 4b4:	07 e4       	ldi	r16, 0x47	; 71
 4b6:	11 e0       	ldi	r17, 0x01	; 1
 4b8:	cf e4       	ldi	r28, 0x4F	; 79
 4ba:	d1 e0       	ldi	r29, 0x01	; 1
	{
		// Read the state of the push button
		int buttonState = (PINB & (1 << buttonPin));

		// Check if the push button is pressed
		if (buttonState != 0)
 4bc:	18 9b       	sbis	0x03, 0	; 3
 4be:	58 c0       	rjmp	.+176    	; 0x570 <main+0x13a>
		{
			inputPassword[index] = mapped_value;
 4c0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 4c4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x1>
 4c8:	fc 01       	movw	r30, r24
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	ef 5a       	subi	r30, 0xAF	; 175
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <mapped_value>
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	31 83       	std	Z+1, r19	; 0x01
 4da:	20 83       	st	Z, r18
			index++;
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__data_end+0x1>
 4e2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>

			if (index >= 3)
 4e6:	03 97       	sbiw	r24, 0x03	; 3
 4e8:	4c f1       	brlt	.+82     	; 0x53c <main+0x106>
				{
					if (inputPassword[i] != password[i])
					match = false;
					break; // Move break outside of if statement
				}
				if (match)
 4ea:	f7 01       	movw	r30, r14
 4ec:	20 81       	ld	r18, Z
 4ee:	31 81       	ldd	r19, Z+1	; 0x01
 4f0:	f6 01       	movw	r30, r12
 4f2:	80 81       	ld	r24, Z
 4f4:	91 81       	ldd	r25, Z+1	; 0x01
 4f6:	28 17       	cp	r18, r24
 4f8:	39 07       	cpc	r19, r25
 4fa:	61 f4       	brne	.+24     	; 0x514 <main+0xde>
				{ // Turn LED on
					PORTD |= (1 << ledPin);
 4fc:	5a 9a       	sbi	0x0b, 2	; 11
					lcdclear();
 4fe:	0e 94 02 01 	call	0x204	; 0x204 <lcdclear>
					setPosition(0, 0);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setPosition>
					print("Password matched!");
 50a:	81 e1       	ldi	r24, 0x11	; 17
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <print>
 512:	0a c0       	rjmp	.+20     	; 0x528 <main+0xf2>
				}
				else
				{
					lcdclear();
 514:	0e 94 02 01 	call	0x204	; 0x204 <lcdclear>
					setPosition(0, 0);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setPosition>
					print("Password incorrect!");
 520:	83 e2       	ldi	r24, 0x23	; 35
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <print>
				}
				index = 0;
 528:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <__data_end+0x1>
 52c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
				memset(inputPassword, 0, sizeof(inputPassword));
 530:	f7 01       	movw	r30, r14
 532:	2b 2d       	mov	r18, r11
 534:	11 92       	st	Z+, r1
 536:	2a 95       	dec	r18
 538:	e9 f7       	brne	.-6      	; 0x534 <main+0xfe>
 53a:	11 c0       	rjmp	.+34     	; 0x55e <main+0x128>
			}
			else
			{
				// Increment button press count
				buttonPressCount++;
 53c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <buttonPressCount>
 540:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <buttonPressCount+0x1>
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <buttonPressCount+0x1>
 54a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <buttonPressCount>

				// Check if the button has been pressed three times
				if (buttonPressCount == 3)
 54e:	03 97       	sbiw	r24, 0x03	; 3
 550:	31 f4       	brne	.+12     	; 0x55e <main+0x128>
				{
					turnOffLED();
 552:	0e 94 19 02 	call	0x432	; 0x432 <turnOffLED>
					buttonPressCount = 0; // Reset button press count
 556:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <buttonPressCount+0x1>
 55a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <buttonPressCount>
 55e:	8f e3       	ldi	r24, 0x3F	; 63
 560:	92 e4       	ldi	r25, 0x42	; 66
 562:	ef e0       	ldi	r30, 0x0F	; 15
 564:	81 50       	subi	r24, 0x01	; 1
 566:	90 40       	sbci	r25, 0x00	; 0
 568:	e0 40       	sbci	r30, 0x00	; 0
 56a:	e1 f7       	brne	.-8      	; 0x564 <main+0x12e>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <main+0x138>
 56e:	00 00       	nop
				}
			}
			_delay_ms(5000);
		}
		setPosition(0, 1);
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setPosition>
		print("Current Value :");
 578:	87 e3       	ldi	r24, 0x37	; 55
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <print>
		sprintf(currentvalueString, "%d", mapped_value); // Correct sprintf usage
 580:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <mapped_value>
 584:	1f 92       	push	r1
 586:	8f 93       	push	r24
 588:	1f 93       	push	r17
 58a:	0f 93       	push	r16
 58c:	df 93       	push	r29
 58e:	cf 93       	push	r28
 590:	0e 94 da 02 	call	0x5b4	; 0x5b4 <sprintf>
		print(currentvalueString); // Print converted string
 594:	ce 01       	movw	r24, r28
 596:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <print>
 59a:	87 ea       	ldi	r24, 0xA7	; 167
 59c:	91 e6       	ldi	r25, 0x61	; 97
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <main+0x168>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <main+0x16e>
 5a4:	00 00       	nop
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	84 cf       	rjmp	.-248    	; 0x4bc <main+0x86>

000005b4 <sprintf>:
 5b4:	ae e0       	ldi	r26, 0x0E	; 14
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	e0 ee       	ldi	r30, 0xE0	; 224
 5ba:	f2 e0       	ldi	r31, 0x02	; 2
 5bc:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__prologue_saves__+0x1c>
 5c0:	0d 89       	ldd	r16, Y+21	; 0x15
 5c2:	1e 89       	ldd	r17, Y+22	; 0x16
 5c4:	86 e0       	ldi	r24, 0x06	; 6
 5c6:	8c 83       	std	Y+4, r24	; 0x04
 5c8:	1a 83       	std	Y+2, r17	; 0x02
 5ca:	09 83       	std	Y+1, r16	; 0x01
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	9f e7       	ldi	r25, 0x7F	; 127
 5d0:	9e 83       	std	Y+6, r25	; 0x06
 5d2:	8d 83       	std	Y+5, r24	; 0x05
 5d4:	ae 01       	movw	r20, r28
 5d6:	47 5e       	subi	r20, 0xE7	; 231
 5d8:	5f 4f       	sbci	r21, 0xFF	; 255
 5da:	6f 89       	ldd	r22, Y+23	; 0x17
 5dc:	78 8d       	ldd	r23, Y+24	; 0x18
 5de:	ce 01       	movw	r24, r28
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <vfprintf>
 5e6:	ef 81       	ldd	r30, Y+7	; 0x07
 5e8:	f8 85       	ldd	r31, Y+8	; 0x08
 5ea:	e0 0f       	add	r30, r16
 5ec:	f1 1f       	adc	r31, r17
 5ee:	10 82       	st	Z, r1
 5f0:	2e 96       	adiw	r28, 0x0e	; 14
 5f2:	e4 e0       	ldi	r30, 0x04	; 4
 5f4:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__epilogue_restores__+0x1c>

000005f8 <vfprintf>:
 5f8:	ab e0       	ldi	r26, 0x0B	; 11
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e2 e0       	ldi	r30, 0x02	; 2
 5fe:	f3 e0       	ldi	r31, 0x03	; 3
 600:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__prologue_saves__>
 604:	6c 01       	movw	r12, r24
 606:	7b 01       	movw	r14, r22
 608:	8a 01       	movw	r16, r20
 60a:	fc 01       	movw	r30, r24
 60c:	17 82       	std	Z+7, r1	; 0x07
 60e:	16 82       	std	Z+6, r1	; 0x06
 610:	83 81       	ldd	r24, Z+3	; 0x03
 612:	81 ff       	sbrs	r24, 1
 614:	cc c1       	rjmp	.+920    	; 0x9ae <__stack+0xaf>
 616:	ce 01       	movw	r24, r28
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	3c 01       	movw	r6, r24
 61c:	f6 01       	movw	r30, r12
 61e:	93 81       	ldd	r25, Z+3	; 0x03
 620:	f7 01       	movw	r30, r14
 622:	93 fd       	sbrc	r25, 3
 624:	85 91       	lpm	r24, Z+
 626:	93 ff       	sbrs	r25, 3
 628:	81 91       	ld	r24, Z+
 62a:	7f 01       	movw	r14, r30
 62c:	88 23       	and	r24, r24
 62e:	09 f4       	brne	.+2      	; 0x632 <vfprintf+0x3a>
 630:	ba c1       	rjmp	.+884    	; 0x9a6 <__stack+0xa7>
 632:	85 32       	cpi	r24, 0x25	; 37
 634:	39 f4       	brne	.+14     	; 0x644 <vfprintf+0x4c>
 636:	93 fd       	sbrc	r25, 3
 638:	85 91       	lpm	r24, Z+
 63a:	93 ff       	sbrs	r25, 3
 63c:	81 91       	ld	r24, Z+
 63e:	7f 01       	movw	r14, r30
 640:	85 32       	cpi	r24, 0x25	; 37
 642:	29 f4       	brne	.+10     	; 0x64e <vfprintf+0x56>
 644:	b6 01       	movw	r22, r12
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 64c:	e7 cf       	rjmp	.-50     	; 0x61c <vfprintf+0x24>
 64e:	91 2c       	mov	r9, r1
 650:	21 2c       	mov	r2, r1
 652:	31 2c       	mov	r3, r1
 654:	ff e1       	ldi	r31, 0x1F	; 31
 656:	f3 15       	cp	r31, r3
 658:	d8 f0       	brcs	.+54     	; 0x690 <vfprintf+0x98>
 65a:	8b 32       	cpi	r24, 0x2B	; 43
 65c:	79 f0       	breq	.+30     	; 0x67c <vfprintf+0x84>
 65e:	38 f4       	brcc	.+14     	; 0x66e <vfprintf+0x76>
 660:	80 32       	cpi	r24, 0x20	; 32
 662:	79 f0       	breq	.+30     	; 0x682 <vfprintf+0x8a>
 664:	83 32       	cpi	r24, 0x23	; 35
 666:	a1 f4       	brne	.+40     	; 0x690 <vfprintf+0x98>
 668:	23 2d       	mov	r18, r3
 66a:	20 61       	ori	r18, 0x10	; 16
 66c:	1d c0       	rjmp	.+58     	; 0x6a8 <vfprintf+0xb0>
 66e:	8d 32       	cpi	r24, 0x2D	; 45
 670:	61 f0       	breq	.+24     	; 0x68a <vfprintf+0x92>
 672:	80 33       	cpi	r24, 0x30	; 48
 674:	69 f4       	brne	.+26     	; 0x690 <vfprintf+0x98>
 676:	23 2d       	mov	r18, r3
 678:	21 60       	ori	r18, 0x01	; 1
 67a:	16 c0       	rjmp	.+44     	; 0x6a8 <vfprintf+0xb0>
 67c:	83 2d       	mov	r24, r3
 67e:	82 60       	ori	r24, 0x02	; 2
 680:	38 2e       	mov	r3, r24
 682:	e3 2d       	mov	r30, r3
 684:	e4 60       	ori	r30, 0x04	; 4
 686:	3e 2e       	mov	r3, r30
 688:	2a c0       	rjmp	.+84     	; 0x6de <vfprintf+0xe6>
 68a:	f3 2d       	mov	r31, r3
 68c:	f8 60       	ori	r31, 0x08	; 8
 68e:	1d c0       	rjmp	.+58     	; 0x6ca <vfprintf+0xd2>
 690:	37 fc       	sbrc	r3, 7
 692:	2d c0       	rjmp	.+90     	; 0x6ee <vfprintf+0xf6>
 694:	20 ed       	ldi	r18, 0xD0	; 208
 696:	28 0f       	add	r18, r24
 698:	2a 30       	cpi	r18, 0x0A	; 10
 69a:	40 f0       	brcs	.+16     	; 0x6ac <vfprintf+0xb4>
 69c:	8e 32       	cpi	r24, 0x2E	; 46
 69e:	b9 f4       	brne	.+46     	; 0x6ce <vfprintf+0xd6>
 6a0:	36 fc       	sbrc	r3, 6
 6a2:	81 c1       	rjmp	.+770    	; 0x9a6 <__stack+0xa7>
 6a4:	23 2d       	mov	r18, r3
 6a6:	20 64       	ori	r18, 0x40	; 64
 6a8:	32 2e       	mov	r3, r18
 6aa:	19 c0       	rjmp	.+50     	; 0x6de <vfprintf+0xe6>
 6ac:	36 fe       	sbrs	r3, 6
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <vfprintf+0xc4>
 6b0:	8a e0       	ldi	r24, 0x0A	; 10
 6b2:	98 9e       	mul	r9, r24
 6b4:	20 0d       	add	r18, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	92 2e       	mov	r9, r18
 6ba:	11 c0       	rjmp	.+34     	; 0x6de <vfprintf+0xe6>
 6bc:	ea e0       	ldi	r30, 0x0A	; 10
 6be:	2e 9e       	mul	r2, r30
 6c0:	20 0d       	add	r18, r0
 6c2:	11 24       	eor	r1, r1
 6c4:	22 2e       	mov	r2, r18
 6c6:	f3 2d       	mov	r31, r3
 6c8:	f0 62       	ori	r31, 0x20	; 32
 6ca:	3f 2e       	mov	r3, r31
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <vfprintf+0xe6>
 6ce:	8c 36       	cpi	r24, 0x6C	; 108
 6d0:	21 f4       	brne	.+8      	; 0x6da <vfprintf+0xe2>
 6d2:	83 2d       	mov	r24, r3
 6d4:	80 68       	ori	r24, 0x80	; 128
 6d6:	38 2e       	mov	r3, r24
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <vfprintf+0xe6>
 6da:	88 36       	cpi	r24, 0x68	; 104
 6dc:	41 f4       	brne	.+16     	; 0x6ee <vfprintf+0xf6>
 6de:	f7 01       	movw	r30, r14
 6e0:	93 fd       	sbrc	r25, 3
 6e2:	85 91       	lpm	r24, Z+
 6e4:	93 ff       	sbrs	r25, 3
 6e6:	81 91       	ld	r24, Z+
 6e8:	7f 01       	movw	r14, r30
 6ea:	81 11       	cpse	r24, r1
 6ec:	b3 cf       	rjmp	.-154    	; 0x654 <vfprintf+0x5c>
 6ee:	98 2f       	mov	r25, r24
 6f0:	9f 7d       	andi	r25, 0xDF	; 223
 6f2:	95 54       	subi	r25, 0x45	; 69
 6f4:	93 30       	cpi	r25, 0x03	; 3
 6f6:	28 f4       	brcc	.+10     	; 0x702 <vfprintf+0x10a>
 6f8:	0c 5f       	subi	r16, 0xFC	; 252
 6fa:	1f 4f       	sbci	r17, 0xFF	; 255
 6fc:	9f e3       	ldi	r25, 0x3F	; 63
 6fe:	99 83       	std	Y+1, r25	; 0x01
 700:	0d c0       	rjmp	.+26     	; 0x71c <vfprintf+0x124>
 702:	83 36       	cpi	r24, 0x63	; 99
 704:	31 f0       	breq	.+12     	; 0x712 <vfprintf+0x11a>
 706:	83 37       	cpi	r24, 0x73	; 115
 708:	71 f0       	breq	.+28     	; 0x726 <vfprintf+0x12e>
 70a:	83 35       	cpi	r24, 0x53	; 83
 70c:	09 f0       	breq	.+2      	; 0x710 <vfprintf+0x118>
 70e:	59 c0       	rjmp	.+178    	; 0x7c2 <vfprintf+0x1ca>
 710:	21 c0       	rjmp	.+66     	; 0x754 <vfprintf+0x15c>
 712:	f8 01       	movw	r30, r16
 714:	80 81       	ld	r24, Z
 716:	89 83       	std	Y+1, r24	; 0x01
 718:	0e 5f       	subi	r16, 0xFE	; 254
 71a:	1f 4f       	sbci	r17, 0xFF	; 255
 71c:	88 24       	eor	r8, r8
 71e:	83 94       	inc	r8
 720:	91 2c       	mov	r9, r1
 722:	53 01       	movw	r10, r6
 724:	13 c0       	rjmp	.+38     	; 0x74c <vfprintf+0x154>
 726:	28 01       	movw	r4, r16
 728:	f2 e0       	ldi	r31, 0x02	; 2
 72a:	4f 0e       	add	r4, r31
 72c:	51 1c       	adc	r5, r1
 72e:	f8 01       	movw	r30, r16
 730:	a0 80       	ld	r10, Z
 732:	b1 80       	ldd	r11, Z+1	; 0x01
 734:	36 fe       	sbrs	r3, 6
 736:	03 c0       	rjmp	.+6      	; 0x73e <vfprintf+0x146>
 738:	69 2d       	mov	r22, r9
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <vfprintf+0x14a>
 73e:	6f ef       	ldi	r22, 0xFF	; 255
 740:	7f ef       	ldi	r23, 0xFF	; 255
 742:	c5 01       	movw	r24, r10
 744:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <strnlen>
 748:	4c 01       	movw	r8, r24
 74a:	82 01       	movw	r16, r4
 74c:	f3 2d       	mov	r31, r3
 74e:	ff 77       	andi	r31, 0x7F	; 127
 750:	3f 2e       	mov	r3, r31
 752:	16 c0       	rjmp	.+44     	; 0x780 <vfprintf+0x188>
 754:	28 01       	movw	r4, r16
 756:	22 e0       	ldi	r18, 0x02	; 2
 758:	42 0e       	add	r4, r18
 75a:	51 1c       	adc	r5, r1
 75c:	f8 01       	movw	r30, r16
 75e:	a0 80       	ld	r10, Z
 760:	b1 80       	ldd	r11, Z+1	; 0x01
 762:	36 fe       	sbrs	r3, 6
 764:	03 c0       	rjmp	.+6      	; 0x76c <vfprintf+0x174>
 766:	69 2d       	mov	r22, r9
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <vfprintf+0x178>
 76c:	6f ef       	ldi	r22, 0xFF	; 255
 76e:	7f ef       	ldi	r23, 0xFF	; 255
 770:	c5 01       	movw	r24, r10
 772:	0e 94 dd 04 	call	0x9ba	; 0x9ba <strnlen_P>
 776:	4c 01       	movw	r8, r24
 778:	f3 2d       	mov	r31, r3
 77a:	f0 68       	ori	r31, 0x80	; 128
 77c:	3f 2e       	mov	r3, r31
 77e:	82 01       	movw	r16, r4
 780:	33 fc       	sbrc	r3, 3
 782:	1b c0       	rjmp	.+54     	; 0x7ba <vfprintf+0x1c2>
 784:	82 2d       	mov	r24, r2
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	88 16       	cp	r8, r24
 78a:	99 06       	cpc	r9, r25
 78c:	b0 f4       	brcc	.+44     	; 0x7ba <vfprintf+0x1c2>
 78e:	b6 01       	movw	r22, r12
 790:	80 e2       	ldi	r24, 0x20	; 32
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 798:	2a 94       	dec	r2
 79a:	f4 cf       	rjmp	.-24     	; 0x784 <vfprintf+0x18c>
 79c:	f5 01       	movw	r30, r10
 79e:	37 fc       	sbrc	r3, 7
 7a0:	85 91       	lpm	r24, Z+
 7a2:	37 fe       	sbrs	r3, 7
 7a4:	81 91       	ld	r24, Z+
 7a6:	5f 01       	movw	r10, r30
 7a8:	b6 01       	movw	r22, r12
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 7b0:	21 10       	cpse	r2, r1
 7b2:	2a 94       	dec	r2
 7b4:	21 e0       	ldi	r18, 0x01	; 1
 7b6:	82 1a       	sub	r8, r18
 7b8:	91 08       	sbc	r9, r1
 7ba:	81 14       	cp	r8, r1
 7bc:	91 04       	cpc	r9, r1
 7be:	71 f7       	brne	.-36     	; 0x79c <vfprintf+0x1a4>
 7c0:	e8 c0       	rjmp	.+464    	; 0x992 <__stack+0x93>
 7c2:	84 36       	cpi	r24, 0x64	; 100
 7c4:	11 f0       	breq	.+4      	; 0x7ca <vfprintf+0x1d2>
 7c6:	89 36       	cpi	r24, 0x69	; 105
 7c8:	41 f5       	brne	.+80     	; 0x81a <vfprintf+0x222>
 7ca:	f8 01       	movw	r30, r16
 7cc:	37 fe       	sbrs	r3, 7
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <vfprintf+0x1e6>
 7d0:	60 81       	ld	r22, Z
 7d2:	71 81       	ldd	r23, Z+1	; 0x01
 7d4:	82 81       	ldd	r24, Z+2	; 0x02
 7d6:	93 81       	ldd	r25, Z+3	; 0x03
 7d8:	0c 5f       	subi	r16, 0xFC	; 252
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	08 c0       	rjmp	.+16     	; 0x7ee <vfprintf+0x1f6>
 7de:	60 81       	ld	r22, Z
 7e0:	71 81       	ldd	r23, Z+1	; 0x01
 7e2:	07 2e       	mov	r0, r23
 7e4:	00 0c       	add	r0, r0
 7e6:	88 0b       	sbc	r24, r24
 7e8:	99 0b       	sbc	r25, r25
 7ea:	0e 5f       	subi	r16, 0xFE	; 254
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255
 7ee:	f3 2d       	mov	r31, r3
 7f0:	ff 76       	andi	r31, 0x6F	; 111
 7f2:	3f 2e       	mov	r3, r31
 7f4:	97 ff       	sbrs	r25, 7
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <vfprintf+0x212>
 7f8:	90 95       	com	r25
 7fa:	80 95       	com	r24
 7fc:	70 95       	com	r23
 7fe:	61 95       	neg	r22
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	8f 4f       	sbci	r24, 0xFF	; 255
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	f0 68       	ori	r31, 0x80	; 128
 808:	3f 2e       	mov	r3, r31
 80a:	2a e0       	ldi	r18, 0x0A	; 10
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	a3 01       	movw	r20, r6
 810:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__ultoa_invert>
 814:	88 2e       	mov	r8, r24
 816:	86 18       	sub	r8, r6
 818:	45 c0       	rjmp	.+138    	; 0x8a4 <vfprintf+0x2ac>
 81a:	85 37       	cpi	r24, 0x75	; 117
 81c:	31 f4       	brne	.+12     	; 0x82a <vfprintf+0x232>
 81e:	23 2d       	mov	r18, r3
 820:	2f 7e       	andi	r18, 0xEF	; 239
 822:	b2 2e       	mov	r11, r18
 824:	2a e0       	ldi	r18, 0x0A	; 10
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	25 c0       	rjmp	.+74     	; 0x874 <vfprintf+0x27c>
 82a:	93 2d       	mov	r25, r3
 82c:	99 7f       	andi	r25, 0xF9	; 249
 82e:	b9 2e       	mov	r11, r25
 830:	8f 36       	cpi	r24, 0x6F	; 111
 832:	c1 f0       	breq	.+48     	; 0x864 <vfprintf+0x26c>
 834:	18 f4       	brcc	.+6      	; 0x83c <vfprintf+0x244>
 836:	88 35       	cpi	r24, 0x58	; 88
 838:	79 f0       	breq	.+30     	; 0x858 <vfprintf+0x260>
 83a:	b5 c0       	rjmp	.+362    	; 0x9a6 <__stack+0xa7>
 83c:	80 37       	cpi	r24, 0x70	; 112
 83e:	19 f0       	breq	.+6      	; 0x846 <vfprintf+0x24e>
 840:	88 37       	cpi	r24, 0x78	; 120
 842:	21 f0       	breq	.+8      	; 0x84c <vfprintf+0x254>
 844:	b0 c0       	rjmp	.+352    	; 0x9a6 <__stack+0xa7>
 846:	e9 2f       	mov	r30, r25
 848:	e0 61       	ori	r30, 0x10	; 16
 84a:	be 2e       	mov	r11, r30
 84c:	b4 fe       	sbrs	r11, 4
 84e:	0d c0       	rjmp	.+26     	; 0x86a <vfprintf+0x272>
 850:	fb 2d       	mov	r31, r11
 852:	f4 60       	ori	r31, 0x04	; 4
 854:	bf 2e       	mov	r11, r31
 856:	09 c0       	rjmp	.+18     	; 0x86a <vfprintf+0x272>
 858:	34 fe       	sbrs	r3, 4
 85a:	0a c0       	rjmp	.+20     	; 0x870 <vfprintf+0x278>
 85c:	29 2f       	mov	r18, r25
 85e:	26 60       	ori	r18, 0x06	; 6
 860:	b2 2e       	mov	r11, r18
 862:	06 c0       	rjmp	.+12     	; 0x870 <vfprintf+0x278>
 864:	28 e0       	ldi	r18, 0x08	; 8
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	05 c0       	rjmp	.+10     	; 0x874 <vfprintf+0x27c>
 86a:	20 e1       	ldi	r18, 0x10	; 16
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <vfprintf+0x27c>
 870:	20 e1       	ldi	r18, 0x10	; 16
 872:	32 e0       	ldi	r19, 0x02	; 2
 874:	f8 01       	movw	r30, r16
 876:	b7 fe       	sbrs	r11, 7
 878:	07 c0       	rjmp	.+14     	; 0x888 <vfprintf+0x290>
 87a:	60 81       	ld	r22, Z
 87c:	71 81       	ldd	r23, Z+1	; 0x01
 87e:	82 81       	ldd	r24, Z+2	; 0x02
 880:	93 81       	ldd	r25, Z+3	; 0x03
 882:	0c 5f       	subi	r16, 0xFC	; 252
 884:	1f 4f       	sbci	r17, 0xFF	; 255
 886:	06 c0       	rjmp	.+12     	; 0x894 <vfprintf+0x29c>
 888:	60 81       	ld	r22, Z
 88a:	71 81       	ldd	r23, Z+1	; 0x01
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 5f       	subi	r16, 0xFE	; 254
 892:	1f 4f       	sbci	r17, 0xFF	; 255
 894:	a3 01       	movw	r20, r6
 896:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__ultoa_invert>
 89a:	88 2e       	mov	r8, r24
 89c:	86 18       	sub	r8, r6
 89e:	fb 2d       	mov	r31, r11
 8a0:	ff 77       	andi	r31, 0x7F	; 127
 8a2:	3f 2e       	mov	r3, r31
 8a4:	36 fe       	sbrs	r3, 6
 8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <vfprintf+0x2ca>
 8a8:	23 2d       	mov	r18, r3
 8aa:	2e 7f       	andi	r18, 0xFE	; 254
 8ac:	a2 2e       	mov	r10, r18
 8ae:	89 14       	cp	r8, r9
 8b0:	58 f4       	brcc	.+22     	; 0x8c8 <vfprintf+0x2d0>
 8b2:	34 fe       	sbrs	r3, 4
 8b4:	0b c0       	rjmp	.+22     	; 0x8cc <vfprintf+0x2d4>
 8b6:	32 fc       	sbrc	r3, 2
 8b8:	09 c0       	rjmp	.+18     	; 0x8cc <vfprintf+0x2d4>
 8ba:	83 2d       	mov	r24, r3
 8bc:	8e 7e       	andi	r24, 0xEE	; 238
 8be:	a8 2e       	mov	r10, r24
 8c0:	05 c0       	rjmp	.+10     	; 0x8cc <vfprintf+0x2d4>
 8c2:	b8 2c       	mov	r11, r8
 8c4:	a3 2c       	mov	r10, r3
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <vfprintf+0x2d6>
 8c8:	b8 2c       	mov	r11, r8
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <vfprintf+0x2d6>
 8cc:	b9 2c       	mov	r11, r9
 8ce:	a4 fe       	sbrs	r10, 4
 8d0:	0f c0       	rjmp	.+30     	; 0x8f0 <vfprintf+0x2f8>
 8d2:	fe 01       	movw	r30, r28
 8d4:	e8 0d       	add	r30, r8
 8d6:	f1 1d       	adc	r31, r1
 8d8:	80 81       	ld	r24, Z
 8da:	80 33       	cpi	r24, 0x30	; 48
 8dc:	21 f4       	brne	.+8      	; 0x8e6 <vfprintf+0x2ee>
 8de:	9a 2d       	mov	r25, r10
 8e0:	99 7e       	andi	r25, 0xE9	; 233
 8e2:	a9 2e       	mov	r10, r25
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <vfprintf+0x300>
 8e6:	a2 fe       	sbrs	r10, 2
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <vfprintf+0x2fe>
 8ea:	b3 94       	inc	r11
 8ec:	b3 94       	inc	r11
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <vfprintf+0x300>
 8f0:	8a 2d       	mov	r24, r10
 8f2:	86 78       	andi	r24, 0x86	; 134
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <vfprintf+0x300>
 8f6:	b3 94       	inc	r11
 8f8:	a3 fc       	sbrc	r10, 3
 8fa:	11 c0       	rjmp	.+34     	; 0x91e <__stack+0x1f>
 8fc:	a0 fe       	sbrs	r10, 0
 8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xd>
 900:	b2 14       	cp	r11, r2
 902:	88 f4       	brcc	.+34     	; 0x926 <__stack+0x27>
 904:	28 0c       	add	r2, r8
 906:	92 2c       	mov	r9, r2
 908:	9b 18       	sub	r9, r11
 90a:	0e c0       	rjmp	.+28     	; 0x928 <__stack+0x29>
 90c:	b2 14       	cp	r11, r2
 90e:	60 f4       	brcc	.+24     	; 0x928 <__stack+0x29>
 910:	b6 01       	movw	r22, r12
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 91a:	b3 94       	inc	r11
 91c:	f7 cf       	rjmp	.-18     	; 0x90c <__stack+0xd>
 91e:	b2 14       	cp	r11, r2
 920:	18 f4       	brcc	.+6      	; 0x928 <__stack+0x29>
 922:	2b 18       	sub	r2, r11
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
 926:	98 2c       	mov	r9, r8
 928:	21 2c       	mov	r2, r1
 92a:	a4 fe       	sbrs	r10, 4
 92c:	10 c0       	rjmp	.+32     	; 0x94e <__stack+0x4f>
 92e:	b6 01       	movw	r22, r12
 930:	80 e3       	ldi	r24, 0x30	; 48
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 938:	a2 fe       	sbrs	r10, 2
 93a:	17 c0       	rjmp	.+46     	; 0x96a <__stack+0x6b>
 93c:	a1 fc       	sbrc	r10, 1
 93e:	03 c0       	rjmp	.+6      	; 0x946 <__stack+0x47>
 940:	88 e7       	ldi	r24, 0x78	; 120
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0x4b>
 946:	88 e5       	ldi	r24, 0x58	; 88
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	b6 01       	movw	r22, r12
 94c:	0c c0       	rjmp	.+24     	; 0x966 <__stack+0x67>
 94e:	8a 2d       	mov	r24, r10
 950:	86 78       	andi	r24, 0x86	; 134
 952:	59 f0       	breq	.+22     	; 0x96a <__stack+0x6b>
 954:	a1 fe       	sbrs	r10, 1
 956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
 958:	8b e2       	ldi	r24, 0x2B	; 43
 95a:	01 c0       	rjmp	.+2      	; 0x95e <__stack+0x5f>
 95c:	80 e2       	ldi	r24, 0x20	; 32
 95e:	a7 fc       	sbrc	r10, 7
 960:	8d e2       	ldi	r24, 0x2D	; 45
 962:	b6 01       	movw	r22, r12
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 96a:	89 14       	cp	r8, r9
 96c:	38 f4       	brcc	.+14     	; 0x97c <__stack+0x7d>
 96e:	b6 01       	movw	r22, r12
 970:	80 e3       	ldi	r24, 0x30	; 48
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 978:	9a 94       	dec	r9
 97a:	f7 cf       	rjmp	.-18     	; 0x96a <__stack+0x6b>
 97c:	8a 94       	dec	r8
 97e:	f3 01       	movw	r30, r6
 980:	e8 0d       	add	r30, r8
 982:	f1 1d       	adc	r31, r1
 984:	80 81       	ld	r24, Z
 986:	b6 01       	movw	r22, r12
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 98e:	81 10       	cpse	r8, r1
 990:	f5 cf       	rjmp	.-22     	; 0x97c <__stack+0x7d>
 992:	22 20       	and	r2, r2
 994:	09 f4       	brne	.+2      	; 0x998 <__stack+0x99>
 996:	42 ce       	rjmp	.-892    	; 0x61c <vfprintf+0x24>
 998:	b6 01       	movw	r22, r12
 99a:	80 e2       	ldi	r24, 0x20	; 32
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <fputc>
 9a2:	2a 94       	dec	r2
 9a4:	f6 cf       	rjmp	.-20     	; 0x992 <__stack+0x93>
 9a6:	f6 01       	movw	r30, r12
 9a8:	86 81       	ldd	r24, Z+6	; 0x06
 9aa:	97 81       	ldd	r25, Z+7	; 0x07
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0xb3>
 9ae:	8f ef       	ldi	r24, 0xFF	; 255
 9b0:	9f ef       	ldi	r25, 0xFF	; 255
 9b2:	2b 96       	adiw	r28, 0x0b	; 11
 9b4:	e2 e1       	ldi	r30, 0x12	; 18
 9b6:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__epilogue_restores__>

000009ba <strnlen_P>:
 9ba:	fc 01       	movw	r30, r24
 9bc:	05 90       	lpm	r0, Z+
 9be:	61 50       	subi	r22, 0x01	; 1
 9c0:	70 40       	sbci	r23, 0x00	; 0
 9c2:	01 10       	cpse	r0, r1
 9c4:	d8 f7       	brcc	.-10     	; 0x9bc <strnlen_P+0x2>
 9c6:	80 95       	com	r24
 9c8:	90 95       	com	r25
 9ca:	8e 0f       	add	r24, r30
 9cc:	9f 1f       	adc	r25, r31
 9ce:	08 95       	ret

000009d0 <strnlen>:
 9d0:	fc 01       	movw	r30, r24
 9d2:	61 50       	subi	r22, 0x01	; 1
 9d4:	70 40       	sbci	r23, 0x00	; 0
 9d6:	01 90       	ld	r0, Z+
 9d8:	01 10       	cpse	r0, r1
 9da:	d8 f7       	brcc	.-10     	; 0x9d2 <strnlen+0x2>
 9dc:	80 95       	com	r24
 9de:	90 95       	com	r25
 9e0:	8e 0f       	add	r24, r30
 9e2:	9f 1f       	adc	r25, r31
 9e4:	08 95       	ret

000009e6 <fputc>:
 9e6:	0f 93       	push	r16
 9e8:	1f 93       	push	r17
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	fb 01       	movw	r30, r22
 9f0:	23 81       	ldd	r18, Z+3	; 0x03
 9f2:	21 fd       	sbrc	r18, 1
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <fputc+0x16>
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	9f ef       	ldi	r25, 0xFF	; 255
 9fa:	2c c0       	rjmp	.+88     	; 0xa54 <fputc+0x6e>
 9fc:	22 ff       	sbrs	r18, 2
 9fe:	16 c0       	rjmp	.+44     	; 0xa2c <fputc+0x46>
 a00:	46 81       	ldd	r20, Z+6	; 0x06
 a02:	57 81       	ldd	r21, Z+7	; 0x07
 a04:	24 81       	ldd	r18, Z+4	; 0x04
 a06:	35 81       	ldd	r19, Z+5	; 0x05
 a08:	42 17       	cp	r20, r18
 a0a:	53 07       	cpc	r21, r19
 a0c:	44 f4       	brge	.+16     	; 0xa1e <fputc+0x38>
 a0e:	a0 81       	ld	r26, Z
 a10:	b1 81       	ldd	r27, Z+1	; 0x01
 a12:	9d 01       	movw	r18, r26
 a14:	2f 5f       	subi	r18, 0xFF	; 255
 a16:	3f 4f       	sbci	r19, 0xFF	; 255
 a18:	31 83       	std	Z+1, r19	; 0x01
 a1a:	20 83       	st	Z, r18
 a1c:	8c 93       	st	X, r24
 a1e:	26 81       	ldd	r18, Z+6	; 0x06
 a20:	37 81       	ldd	r19, Z+7	; 0x07
 a22:	2f 5f       	subi	r18, 0xFF	; 255
 a24:	3f 4f       	sbci	r19, 0xFF	; 255
 a26:	37 83       	std	Z+7, r19	; 0x07
 a28:	26 83       	std	Z+6, r18	; 0x06
 a2a:	14 c0       	rjmp	.+40     	; 0xa54 <fputc+0x6e>
 a2c:	8b 01       	movw	r16, r22
 a2e:	ec 01       	movw	r28, r24
 a30:	fb 01       	movw	r30, r22
 a32:	00 84       	ldd	r0, Z+8	; 0x08
 a34:	f1 85       	ldd	r31, Z+9	; 0x09
 a36:	e0 2d       	mov	r30, r0
 a38:	09 95       	icall
 a3a:	89 2b       	or	r24, r25
 a3c:	e1 f6       	brne	.-72     	; 0x9f6 <fputc+0x10>
 a3e:	d8 01       	movw	r26, r16
 a40:	16 96       	adiw	r26, 0x06	; 6
 a42:	8d 91       	ld	r24, X+
 a44:	9c 91       	ld	r25, X
 a46:	17 97       	sbiw	r26, 0x07	; 7
 a48:	01 96       	adiw	r24, 0x01	; 1
 a4a:	17 96       	adiw	r26, 0x07	; 7
 a4c:	9c 93       	st	X, r25
 a4e:	8e 93       	st	-X, r24
 a50:	16 97       	sbiw	r26, 0x06	; 6
 a52:	ce 01       	movw	r24, r28
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	1f 91       	pop	r17
 a5a:	0f 91       	pop	r16
 a5c:	08 95       	ret

00000a5e <__ultoa_invert>:
 a5e:	fa 01       	movw	r30, r20
 a60:	aa 27       	eor	r26, r26
 a62:	28 30       	cpi	r18, 0x08	; 8
 a64:	51 f1       	breq	.+84     	; 0xaba <__ultoa_invert+0x5c>
 a66:	20 31       	cpi	r18, 0x10	; 16
 a68:	81 f1       	breq	.+96     	; 0xaca <__ultoa_invert+0x6c>
 a6a:	e8 94       	clt
 a6c:	6f 93       	push	r22
 a6e:	6e 7f       	andi	r22, 0xFE	; 254
 a70:	6e 5f       	subi	r22, 0xFE	; 254
 a72:	7f 4f       	sbci	r23, 0xFF	; 255
 a74:	8f 4f       	sbci	r24, 0xFF	; 255
 a76:	9f 4f       	sbci	r25, 0xFF	; 255
 a78:	af 4f       	sbci	r26, 0xFF	; 255
 a7a:	b1 e0       	ldi	r27, 0x01	; 1
 a7c:	3e d0       	rcall	.+124    	; 0xafa <__ultoa_invert+0x9c>
 a7e:	b4 e0       	ldi	r27, 0x04	; 4
 a80:	3c d0       	rcall	.+120    	; 0xafa <__ultoa_invert+0x9c>
 a82:	67 0f       	add	r22, r23
 a84:	78 1f       	adc	r23, r24
 a86:	89 1f       	adc	r24, r25
 a88:	9a 1f       	adc	r25, r26
 a8a:	a1 1d       	adc	r26, r1
 a8c:	68 0f       	add	r22, r24
 a8e:	79 1f       	adc	r23, r25
 a90:	8a 1f       	adc	r24, r26
 a92:	91 1d       	adc	r25, r1
 a94:	a1 1d       	adc	r26, r1
 a96:	6a 0f       	add	r22, r26
 a98:	71 1d       	adc	r23, r1
 a9a:	81 1d       	adc	r24, r1
 a9c:	91 1d       	adc	r25, r1
 a9e:	a1 1d       	adc	r26, r1
 aa0:	20 d0       	rcall	.+64     	; 0xae2 <__ultoa_invert+0x84>
 aa2:	09 f4       	brne	.+2      	; 0xaa6 <__ultoa_invert+0x48>
 aa4:	68 94       	set
 aa6:	3f 91       	pop	r19
 aa8:	2a e0       	ldi	r18, 0x0A	; 10
 aaa:	26 9f       	mul	r18, r22
 aac:	11 24       	eor	r1, r1
 aae:	30 19       	sub	r19, r0
 ab0:	30 5d       	subi	r19, 0xD0	; 208
 ab2:	31 93       	st	Z+, r19
 ab4:	de f6       	brtc	.-74     	; 0xa6c <__ultoa_invert+0xe>
 ab6:	cf 01       	movw	r24, r30
 ab8:	08 95       	ret
 aba:	46 2f       	mov	r20, r22
 abc:	47 70       	andi	r20, 0x07	; 7
 abe:	40 5d       	subi	r20, 0xD0	; 208
 ac0:	41 93       	st	Z+, r20
 ac2:	b3 e0       	ldi	r27, 0x03	; 3
 ac4:	0f d0       	rcall	.+30     	; 0xae4 <__ultoa_invert+0x86>
 ac6:	c9 f7       	brne	.-14     	; 0xaba <__ultoa_invert+0x5c>
 ac8:	f6 cf       	rjmp	.-20     	; 0xab6 <__ultoa_invert+0x58>
 aca:	46 2f       	mov	r20, r22
 acc:	4f 70       	andi	r20, 0x0F	; 15
 ace:	40 5d       	subi	r20, 0xD0	; 208
 ad0:	4a 33       	cpi	r20, 0x3A	; 58
 ad2:	18 f0       	brcs	.+6      	; 0xada <__ultoa_invert+0x7c>
 ad4:	49 5d       	subi	r20, 0xD9	; 217
 ad6:	31 fd       	sbrc	r19, 1
 ad8:	40 52       	subi	r20, 0x20	; 32
 ada:	41 93       	st	Z+, r20
 adc:	02 d0       	rcall	.+4      	; 0xae2 <__ultoa_invert+0x84>
 ade:	a9 f7       	brne	.-22     	; 0xaca <__ultoa_invert+0x6c>
 ae0:	ea cf       	rjmp	.-44     	; 0xab6 <__ultoa_invert+0x58>
 ae2:	b4 e0       	ldi	r27, 0x04	; 4
 ae4:	a6 95       	lsr	r26
 ae6:	97 95       	ror	r25
 ae8:	87 95       	ror	r24
 aea:	77 95       	ror	r23
 aec:	67 95       	ror	r22
 aee:	ba 95       	dec	r27
 af0:	c9 f7       	brne	.-14     	; 0xae4 <__ultoa_invert+0x86>
 af2:	00 97       	sbiw	r24, 0x00	; 0
 af4:	61 05       	cpc	r22, r1
 af6:	71 05       	cpc	r23, r1
 af8:	08 95       	ret
 afa:	9b 01       	movw	r18, r22
 afc:	ac 01       	movw	r20, r24
 afe:	0a 2e       	mov	r0, r26
 b00:	06 94       	lsr	r0
 b02:	57 95       	ror	r21
 b04:	47 95       	ror	r20
 b06:	37 95       	ror	r19
 b08:	27 95       	ror	r18
 b0a:	ba 95       	dec	r27
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__ultoa_invert+0xa2>
 b0e:	62 0f       	add	r22, r18
 b10:	73 1f       	adc	r23, r19
 b12:	84 1f       	adc	r24, r20
 b14:	95 1f       	adc	r25, r21
 b16:	a0 1d       	adc	r26, r0
 b18:	08 95       	ret

00000b1a <__prologue_saves__>:
 b1a:	2f 92       	push	r2
 b1c:	3f 92       	push	r3
 b1e:	4f 92       	push	r4
 b20:	5f 92       	push	r5
 b22:	6f 92       	push	r6
 b24:	7f 92       	push	r7
 b26:	8f 92       	push	r8
 b28:	9f 92       	push	r9
 b2a:	af 92       	push	r10
 b2c:	bf 92       	push	r11
 b2e:	cf 92       	push	r12
 b30:	df 92       	push	r13
 b32:	ef 92       	push	r14
 b34:	ff 92       	push	r15
 b36:	0f 93       	push	r16
 b38:	1f 93       	push	r17
 b3a:	cf 93       	push	r28
 b3c:	df 93       	push	r29
 b3e:	cd b7       	in	r28, 0x3d	; 61
 b40:	de b7       	in	r29, 0x3e	; 62
 b42:	ca 1b       	sub	r28, r26
 b44:	db 0b       	sbc	r29, r27
 b46:	0f b6       	in	r0, 0x3f	; 63
 b48:	f8 94       	cli
 b4a:	de bf       	out	0x3e, r29	; 62
 b4c:	0f be       	out	0x3f, r0	; 63
 b4e:	cd bf       	out	0x3d, r28	; 61
 b50:	09 94       	ijmp

00000b52 <__epilogue_restores__>:
 b52:	2a 88       	ldd	r2, Y+18	; 0x12
 b54:	39 88       	ldd	r3, Y+17	; 0x11
 b56:	48 88       	ldd	r4, Y+16	; 0x10
 b58:	5f 84       	ldd	r5, Y+15	; 0x0f
 b5a:	6e 84       	ldd	r6, Y+14	; 0x0e
 b5c:	7d 84       	ldd	r7, Y+13	; 0x0d
 b5e:	8c 84       	ldd	r8, Y+12	; 0x0c
 b60:	9b 84       	ldd	r9, Y+11	; 0x0b
 b62:	aa 84       	ldd	r10, Y+10	; 0x0a
 b64:	b9 84       	ldd	r11, Y+9	; 0x09
 b66:	c8 84       	ldd	r12, Y+8	; 0x08
 b68:	df 80       	ldd	r13, Y+7	; 0x07
 b6a:	ee 80       	ldd	r14, Y+6	; 0x06
 b6c:	fd 80       	ldd	r15, Y+5	; 0x05
 b6e:	0c 81       	ldd	r16, Y+4	; 0x04
 b70:	1b 81       	ldd	r17, Y+3	; 0x03
 b72:	aa 81       	ldd	r26, Y+2	; 0x02
 b74:	b9 81       	ldd	r27, Y+1	; 0x01
 b76:	ce 0f       	add	r28, r30
 b78:	d1 1d       	adc	r29, r1
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	f8 94       	cli
 b7e:	de bf       	out	0x3e, r29	; 62
 b80:	0f be       	out	0x3f, r0	; 63
 b82:	cd bf       	out	0x3d, r28	; 61
 b84:	ed 01       	movw	r28, r26
 b86:	08 95       	ret

00000b88 <_exit>:
 b88:	f8 94       	cli

00000b8a <__stop_program>:
 b8a:	ff cf       	rjmp	.-2      	; 0xb8a <__stop_program>
